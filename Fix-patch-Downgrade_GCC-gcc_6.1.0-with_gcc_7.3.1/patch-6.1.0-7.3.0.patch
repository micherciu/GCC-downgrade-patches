--- a/libsanitizer/sanitizer_common/sanitizer_linux.h	2015-10-21 10:32:45.000000000 +0300
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.h	2019-06-26 14:10:23.837186426 +0300
@@ -19,7 +19,6 @@
 #include "sanitizer_platform_limits_posix.h"
 
 struct link_map;  // Opaque type returned by dlopen().
-struct sigaltstack;
 
 namespace __sanitizer {
 // Dirent structure for getdents(). Note that this structure is different from
@@ -28,8 +27,7 @@
 
 // Syscall wrappers.
 uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count);
-uptr internal_sigaltstack(const struct sigaltstack* ss,
-                          struct sigaltstack* oss);
+uptr internal_sigaltstack(const void* ss, void* oss);
 uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,
     __sanitizer_sigset_t *oldset);
 void internal_sigfillset(__sanitizer_sigset_t *set);
--- a/libsanitizer/sanitizer_common/sanitizer_linux.cc	2015-11-23 11:07:18.000000000 +0200
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.cc	2019-06-26 14:08:42.599207156 +0300
@@ -546,10 +546,9 @@
 }
 #endif
 
-uptr internal_sigaltstack(const struct sigaltstack *ss,
-                         struct sigaltstack *oss) {
-  return internal_syscall(SYSCALL(sigaltstack), (uptr)ss, (uptr)oss);
-}
+uptr internal_sigaltstack(const void *ss, void *oss) {
+   return internal_syscall(__NR_sigaltstack, (uptr)ss, (uptr)oss);
+ }
 
 int internal_fork() {
 #if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
--- a/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc	2015-10-21 10:32:45.000000000 +0300
+++ b/libsanitizer/sanitizer_common/sanitizer_stoptheworld_linux_libcdep.cc	2019-06-26 14:00:58.272701828 +0300
@@ -267,7 +267,7 @@
 
   // Alternate stack for signal handling.
   InternalScopedBuffer<char> handler_stack_memory(kHandlerStackSize);
-  struct sigaltstack handler_stack;
+  stack_t handler_stack;
   internal_memset(&handler_stack, 0, sizeof(handler_stack));
   handler_stack.ss_sp = handler_stack_memory.data();
   handler_stack.ss_size = kHandlerStackSize;
--- a/libsanitizer/tsan/tsan_platform_linux.cc	2015-11-23 11:07:18.000000000 +0200
+++ b/libsanitizer/tsan/tsan_platform_linux.cc	2019-06-26 14:12:38.996493827 +0300
@@ -283,7 +283,7 @@
 int ExtractResolvFDs(void *state, int *fds, int nfd) {
 #if SANITIZER_LINUX
   int cnt = 0;
-  __res_state *statp = (__res_state*)state;
+struct __res_state *statp = (struct __res_state*)state;
   for (int i = 0; i < MAXNS && cnt < nfd; i++) {
     if (statp->_u._ext.nsaddrs[i] && statp->_u._ext.nssocks[i] != -1)
       fds[cnt++] = statp->_u._ext.nssocks[i];

--- a/gcc/ubsan.c	2016-01-06 12:24:15.000000000 +0200
+++ b/gcc/ubsan.c	2019-06-26 14:44:59.964544387 +0300
@@ -1470,7 +1470,7 @@
 
   expanded_location xloc = expand_location (loc);
   if (xloc.file == NULL || strncmp (xloc.file, "\1", 2) == 0
-      || xloc.file == '\0' || xloc.file[0] == '\xff'
+      || xloc.file[0] == '\0' || xloc.file[0] == '\xff'
       || xloc.file[1] == '\xff')
     return false;
 
--- a/libgcc/config/i386/linux-unwind.h	2016-01-04 16:30:50.000000000 +0200
+++ b/libgcc/config/i386/linux-unwind.h	2019-06-26 14:54:32.768649208 +0300
@@ -35,7 +35,7 @@
 #if defined __GLIBC__ && !(__GLIBC__ == 2 && __GLIBC_MINOR__ == 0)
 
 #include <signal.h>
-#include <sys/ucontext.h>
+#include <ucontext.h>
 
 #ifdef __x86_64__
 
@@ -58,7 +58,7 @@
   if (*(unsigned char *)(pc+0) == 0x48
       && *(unsigned long long *)(pc+1) == RT_SIGRETURN_SYSCALL)
     {
-      struct ucontext *uc_ = context->cfa;
+      struct ucontext_t *uc_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
          because it does not alias anything.  */
@@ -138,7 +138,7 @@
 	siginfo_t *pinfo;
 	void *puc;
 	siginfo_t info;
-	struct ucontext uc;
+        ucontext_t uc;
       } *rt_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
