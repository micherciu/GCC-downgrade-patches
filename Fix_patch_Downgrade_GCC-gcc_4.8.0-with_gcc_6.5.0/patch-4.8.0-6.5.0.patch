--- a/gcc/cp/cfns.gperf	2013-01-10 22:38:27.000000000 +0200
+++ b/gcc/cp/cfns.gperf	2018-12-12 15:58:24.253571449 +0200
@@ -1,3 +1,5 @@
+%language=C++
+%define class-name libc_name
 %{
 /* Copyright (C) 2000-2013 Free Software Foundation, Inc.
 
@@ -16,14 +18,6 @@
 You should have received a copy of the GNU General Public License
 along with GCC; see the file COPYING3.  If not see
 <http://www.gnu.org/licenses/>.  */
-#ifdef __GNUC__
-__inline
-#endif
-static unsigned int hash (const char *, unsigned int);
-#ifdef __GNUC__
-__inline
-#endif
-const char * libc_name_p (const char *, unsigned int);
 %}
 %%
 # The standard C library functions, for feeding to gperf; the result is used
--- a/gcc/cp/cfns.h	2013-01-10 22:38:27.000000000 +0200
+++ b/gcc/cp/cfns.h	2018-12-12 17:22:18.819727946 +0200
@@ -1,5 +1,5 @@
-/* ANSI-C code produced by gperf version 3.0.3 */
-/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p -L ANSI-C cfns.gperf  */
+/* C++ code produced by gperf version 3.0.4 */
+/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p -L C++ --output-file cfns.h cfns.gperf  */
 
 #if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
       && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
@@ -28,7 +28,7 @@
 #error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gnu-gperf@gnu.org>."
 #endif
 
-#line 1 "cfns.gperf"
+#line 3 "cfns.gperf"
 
 /* Copyright (C) 2000-2013 Free Software Foundation, Inc.
 
@@ -47,17 +47,17 @@
 You should have received a copy of the GNU General Public License
 along with GCC; see the file COPYING3.  If not see
 <http://www.gnu.org/licenses/>.  */
-#ifdef __GNUC__
+/*#ifdef __GNUC__
 __inline
 #endif
 static unsigned int hash (const char *, unsigned int);
 #ifdef __GNUC__
 __inline
 #endif
-const char * libc_name_p (const char *, unsigned int);
+const char * libc_name_p (const char *, unsigned int);*/
 /* maximum key range = 391, duplicates = 0 */
 
-#ifdef __GNUC__
+/*#ifdef __GNUC__
 __inline
 #else
 #ifdef __cplusplus
@@ -65,7 +65,17 @@
 #endif
 #endif
 static unsigned int
-hash (register const char *str, register unsigned int len)
+hash (register const char *str, register unsigned int len)*/
+class libc_name
+{
+private:
+  static inline unsigned int hash (const char *str, unsigned int len);
+public:
+  static const char *libc_name_p (const char *str, unsigned int len);
+};
+
+inline unsigned int
+libc_name::hash (register const char *str, register unsigned int len)
 {
   static const unsigned short asso_values[] =
     {
@@ -122,14 +132,15 @@
   return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-#ifdef __GNUC__
+/*#ifdef __GNUC__
 __inline
 #ifdef __GNUC_STDC_INLINE__
 __attribute__ ((__gnu_inline__))
 #endif
-#endif
+#endif*/
 const char *
-libc_name_p (register const char *str, register unsigned int len)
+//libc_name_p (register const char *str, register unsigned int len)
+libc_name::libc_name_p (register const char *str, register unsigned int len)
 {
   enum
     {
--- a/gcc/cp/except.c	2013-10-25 16:49:48.000000000 +0300
+++ b/gcc/cp/except.c	2018-12-12 17:26:45.032181537 +0200
@@ -1025,7 +1025,7 @@
      unless the system headers are playing rename tricks, and if
      they are, we don't want to be confused by them.  */
   id = DECL_NAME (fn);
-  return !!libc_name_p (IDENTIFIER_POINTER (id), IDENTIFIER_LENGTH (id));
+return !!libc_name::libc_name_p (IDENTIFIER_POINTER (id), IDENTIFIER_LENGTH (id));
 }
 
 /* Returns nonzero if an exception of type FROM will be caught by a
--- a/gcc/cp/Make-lang.in	2013-01-10 22:38:27.000000000 +0200
+++ b/gcc/cp/Make-lang.in	2018-11-25 21:01:00.105454296 +0200
@@ -115,7 +115,7 @@
 # deleting the $(srcdir)/cp/cfns.h file.
 $(srcdir)/cp/cfns.h:
 endif
-	gperf -o -C -E -k '1-6,$$' -j1 -D -N 'libc_name_p' -L ANSI-C \
+	gperf -o -C -E -k '1-6,$$' -j1 -D -N 'libc_name_p' -L C++ \
 		$(srcdir)/cp/cfns.gperf --output-file $(srcdir)/cp/cfns.h
 
 #
--- a/libgcc/config/i386/linux-unwind.h	2013-02-04 21:06:20.000000000 +0200
+++ b/libgcc/config/i386/linux-unwind.h	2018-12-12 17:39:13.078052166 +0200
@@ -58,7 +58,7 @@
   if (*(unsigned char *)(pc+0) == 0x48
       && *(unsigned long long *)(pc+1) == RT_SIGRETURN_SYSCALL)
     {
-      struct ucontext *uc_ = context->cfa;
+      ucontext_t *uc_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
          because it does not alias anything.  */
@@ -138,12 +138,12 @@
 	siginfo_t *pinfo;
 	void *puc;
 	siginfo_t info;
-	struct ucontext uc;
+        ucontext_t uc;
       } *rt_ = context->cfa;
       /* The void * cast is necessary to avoid an aliasing warning.
          The aliasing warning is correct, but should not be a problem
          because it does not alias anything.  */
-      sc = (struct sigcontext *) (void *) &rt_->uc.uc_mcontext;
+      sc = (struct sigcontext *) (void *) &rt_->uc.ucontext;
     }
   else
     return _URC_END_OF_STACK;
--- a/libsanitizer/asan/asan_linux.cc	2013-01-23 13:41:33.000000000 +0200
+++ b/libsanitizer/asan/asan_linux.cc	2018-11-25 21:15:02.755792187 +0200
@@ -25,6 +25,7 @@
 #include <sys/types.h>
 #include <fcntl.h>
 #include <pthread.h>
+#include <signal.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <unwind.h>
--- a/libsanitizer/tsan/tsan_platform_linux.cc	2013-02-21 12:57:10.000000000 +0200
+++ b/libsanitizer/tsan/tsan_platform_linux.cc	2018-12-12 17:41:24.953249775 +0200
@@ -39,7 +39,7 @@
 #include <sched.h>
 #include <dlfcn.h>
 #define __need_res_state
-#include <resolv.h>
+#include "bits/types/res_state.h"
 
 extern "C" int arch_prctl(int code, __sanitizer::uptr *addr);
 
